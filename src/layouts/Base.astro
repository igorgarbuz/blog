---
import "@styles/themes.css"
import "@styles/global.css"
import type { CollectionEntry } from "astro:content"
import { SITE, LOCALE } from "@config"
import Header from "@components/Header.astro"
import Footer from "@components/Footer.astro"
import BaseHead from "@components/BaseHead.astro"

type Props = {
    frontmatter?: Partial<CollectionEntry<"posts">["data"]>
}

/**
 * Using Astro convention frontmatter property to be able to use the layout
 * by any .md file directly https://docs.astro.build/en/basics/layouts/
 */
const {
    frontmatter: {
        author = SITE.author,
        canonicalUrl = new URL(Astro.url.pathname, Astro.site).href,
        dateModified,
        datePublished,
        description = SITE.description,
        ogImage = SITE.ogImage,
        title,
    } = {},
} = Astro.props

const ogImageUrl = new URL(ogImage, Astro.url.origin).href

let pageTitle = title ? `${title} â€¢ ${SITE.siteName}` : SITE.title
---

<!doctype html>
<html lang=`${LOCALE.lang ?? "en"}`>
    <head>
        <BaseHead
            author={author}
            canonicalUrl={canonicalUrl}
            dateModified={dateModified}
            datePublished={datePublished}
            description={description}
            ogImage={ogImageUrl}
            siteName={SITE.siteName}
            title={pageTitle}
        />
    </head>
    <body>
        {
            /* Inline script to set the theme based on the user's preference or the default theme
            implemented as IIFE inline script to avoid FOUC (Flash of Unstyled Content) when the theme is set.
            This script is blocking the rendering of the page until it is executed, but given it's size it's negligible.
            Placing it just after the <body> tag ensures that the 'document' object is available.
            An alternative approach is to place it in a separate .js file, which is loaded asynchronously inside the <head> tag.
            This will introduce an additional network request, will require adding document.addEventListener('DOMContentLoaded', ...)
            listener, and, given asynchronous nature, won't guarantee that the script execution ends before layout is rendered,
            event thought 99.9% of the time it will be executed before the layout.
            */
        }
        <script is:inline>
            ;(function () {
                const currentTheme =
                    localStorage.getItem("theme") ||
                    (window.matchMedia("(prefers-color-scheme: light)").matches ? "light" : "dark")

                document.documentElement.classList.add(currentTheme)
                localStorage.setItem("theme", currentTheme)
            })()
        </script>

        <Header />
        {
            /* Current layout assumes everything in main is centered
        and has the same width defined in the <main> tag (c.f global.css). If needed to have
        a more complex design where the banner (i.e hero image) is wider than the main textual content,
        it is recommended to define the text content width in a new class (e.g .prose)
        and increase the width for <main> up to the hero image width.
        */
        }
        <main>
            <slot />
        </main>
        <Footer />
    </body>
</html>
