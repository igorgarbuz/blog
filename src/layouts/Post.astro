---
// Nesting layouts can be a good practice, like described in https://docs.astro.build/en/tutorial/4-layouts/3/
import Base from "./Base.astro"
import type { CollectionEntry } from "astro:content"
import FormattedDate from "@components/FormattedDate.astro"

interface Props {
    post: CollectionEntry<"posts">
}

const { post } = Astro.props
const { Content } = await post.render()

const { data } = post

const { author, datePublished, dateModified, title } = data
---

<Base frontmatter={data}>
    <article>
        <hgroup>
            <h1>{title}</h1>
            <FormattedDate
                datePublished={datePublished}
                dateModified={dateModified}
                author={author}
            />
        </hgroup>
        <div>
            <Content />
        </div>
    </article>
</Base>

<style>
    hgroup {
        margin-bottom: var(--spacing-32);
    }

    h1 {
        margin-bottom: 0;
    }

    .heading-link {
        color: var(--color-txt-secondary);
        font-size: var(--font-14);
        margin-left: var(--spacing-8);
    }
</style>

{
    /**
     * Converted to global to make work classes for elements generated with JS
     */
}
<style is:global>
    .copy-code-button {
        align-items: center;
        background-color: transparent;
        border-radius: var(--spacing-2);
        border: none;
        color: hsl(0deg 0% 50%); /* Fix color since code block theme is not changed */
        cursor: pointer;
        display: flex;
        font-size: var(--font-12);
        height: var(--spacing-24);
        justify-content: center;
        padding: 3px;
        position: absolute;
        right: var(--spacing-8);
        top: var(--spacing-8);
        transition: color 0.2s;
        width: var(--spacing-24);
    }

    /* Prevent sticky hover state on touch devices */
    @media (hover: hover) {
        .copy-code-button:hover {
            background-color: hsla(0deg 0% 100% / 10%);
        }
    }

    .heading-link {
        color: var(--color-txt-secondary);
        height: 0;
        margin-left: var(--spacing-8);
        opacity: 0;
        transition:
            opacity 0.2s,
            visibility 0.2s;
        visibility: hidden;
    }

    .heading-with-link:hover > a.heading-link {
        height: auto;
        opacity: 1;
        visibility: visible;
    }

    /* Hide table of contents title */
    h2[id="table-of-contents"] {
        display: none;
    }

    summary {
        cursor: pointer;
    }

    /* <details> is used by remark TOC plugin to wrap table of contents  */
    details {
        background-color: var(--color-bg-secondary);
        border-radius: var(--rounded-5);
        padding: var(--spacing-16);
    }

    details a {
        text-decoration: none;
        font-weight: 500;
        font-size: var(--font-16);
    }

    details a:hover {
        text-decoration: underline;
    }
</style>

{
    /**
     * Following is a sort of "hacking" into shiki styled code block.
     * It's neither elegant nor efficient, but it works.
     * There could be a better way to do this and a user of this code is
     * encouraged to try finding out how to avoid this client JS.
     *
     * In iOS navigator.clipboard.writeText is only testable
     * in production with HTTPS. `navigator.clipboard`` API has
     * certain restrictions and does not work in development mode.
     *
     * Add fragment identifiers to headings c.f https://developer.mozilla.org/en-US/docs/Web/Text_fragments
     *
     * Use inline script to avoid bundling and execute faster that prevent flickering on render
     */
}
<script is:inline>
    function addHeadingLinks() {
        document.querySelectorAll("h2, h3, h4, h5, h6").forEach(heading => {
            heading.classList.add("heading-with-link")
            const link = document.createElement("a")
            link.innerText = "#"
            link.className = "heading-link"
            link.href = "#" + heading.id
            link.ariaHidden = "true"
            heading.appendChild(link)
        })
    }
    addHeadingLinks()

    function attachCopyButtons() {
        const copyButtonIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>`
        const codeBlocks = document.querySelectorAll("pre:has(code)")

        codeBlocks.forEach(codeBlock => {
            const copyButton = document.createElement("button")
            copyButton.className = "copy-code-button"
            copyButton.innerHTML = copyButtonIcon
            codeBlock.setAttribute("tabindex", "0")
            codeBlock.appendChild(copyButton)
            // @ts-expect-error - codeBlock is HTMLElement
            codeBlock.style.position = "relative"
            copyButton.addEventListener("click", async () => {
                await copyCode(codeBlock, copyButton)
            })
        })

        // @ts-expect-error - block and button are HTMLElement
        async function copyCode(block, button) {
            const code = block.querySelector("code")
            const text = code?.innerText

            await navigator.clipboard.writeText(text ?? "")

            button.style.color = "hsl(0deg 0% 90%)"
            setTimeout(() => {
                button.style.color = "hsl(0deg 0% 50%)"
            }, 2000)
        }
    }
    attachCopyButtons()
</script>
